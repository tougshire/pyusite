# Generated by Django 5.0.6 on 2024-05-20 10:22

import datetime
import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Document',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(blank=True, help_text='The title to be displayed with document.  It may or may not correspond to anything in the document itself. (can be blank)', max_length=200, verbose_name='title')),
                ('show_title', models.BooleanField(default=True, help_text='If the title should be shown (if not blank)', verbose_name='show title')),
                ('slug', models.SlugField(help_text='The name or slug for use in URLs and within the application.  Note: Auto-generated value may not be unique. Uniquness and format are checked after submit', max_length=100, unique=True, verbose_name='name/slug')),
                ('doc_file', models.FileField(help_text='The file to be uploaded', upload_to='documents')),
            ],
        ),
        migrations.CreateModel(
            name='Menu',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, help_text='The label of this menu item', max_length=30, verbose_name='name')),
                ('level', models.IntegerField(default=0, help_text='A number, like an id (but not unique enforced), which can be used for the page to indentify the menu. Use of 1000 for the main menu is recommended', verbose_name='level')),
            ],
            options={
                'ordering': ('-level',),
            },
        ),
        migrations.CreateModel(
            name='Page',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(blank=True, help_text='The title of the page. to be displayed (can be blank)', max_length=200, verbose_name='title')),
                ('show_title', models.BooleanField(default=True, help_text='If the title should be shown (if not blank)', verbose_name='show title')),
                ('slug', models.SlugField(help_text='The name or slug for use in URLs and within the application.  Note: Auto-generated value may not be unique. Uniquness and format are checked after submit', max_length=100, unique=True, verbose_name='name/slug')),
                ('is_home', models.BooleanField(default=False, help_text='If this is the home page', verbose_name='is home page')),
                ('order', models.IntegerField(default=0, help_text='The order that the page would appear in a list', verbose_name='order')),
                ('display', models.CharField(choices=[('Y', 'Normal'), ('H', 'Hide from Menus'), ('N', 'Do not display')], default='Y', help_text='How the page should be displayed', max_length=2, verbose_name='display')),
            ],
            options={
                'ordering': ('order', 'title'),
            },
        ),
        migrations.CreateModel(
            name='Rack',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(blank=True, help_text='The title of the rack to be displayed (can be blank)', max_length=200, verbose_name='title')),
                ('show_title', models.BooleanField(default=True, help_text='If the title should be shown (if not blank)', verbose_name='show title')),
                ('slug', models.SlugField(help_text='The name or slug for use in URLs and within the application.  Note: Auto-generated value may not be unique. Uniquness and format are checked after submit', max_length=100, unique=True, verbose_name='name/slug')),
                ('width', models.IntegerField(default=1, help_text='The width of the rack in multiples of how big it is compared to the narrowest rack', verbose_name='width')),
                ('show_article_meta', models.CharField(choices=[('00', 'None'), ('a0', 'Author'), ('0d', 'Publish Date'), ('ad', 'Author and Date')], default='00', help_text='What article meta information should be shown for aticles in racks', max_length=2, verbose_name='show article meta')),
                ('content_before_articles', models.CharField(blank=True, help_text='The content of the rack before any included articles', max_length=255, verbose_name='content before articles')),
                ('content_after_articles', models.CharField(blank=True, help_text='The content of the rack after any included articles', max_length=255, verbose_name='content after articles')),
                ('order', models.IntegerField(default=0, help_text='A number used for ordering of the rack in a section', verbose_name='order')),
                ('display', models.CharField(choices=[('Y', 'Normal'), ('P', 'Preview Only'), ('N', 'Do not display')], default='Y', help_text='How the rack should be displayed. Racks that are hidden from sections may still be displayed independently', max_length=2, verbose_name='display')),
                ('collapse', models.BooleanField(default=True, help_text='Collapse if there are no hangers/articles', verbose_name='collapse')),
            ],
            options={
                'ordering': ('section', 'order'),
            },
        ),
        migrations.CreateModel(
            name='Sdcimage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('imagefile', models.ImageField(upload_to='pyusiteimages', verbose_name='file')),
                ('name', models.CharField(help_text='The name to be used by authors to identify the image', max_length=20, unique=True, verbose_name='name')),
                ('alt_text', models.TextField(help_text='The default alt-text to be redered in the template.  This is the text displayed for the visually impaired', verbose_name='alt text')),
                ('title', models.CharField(blank=True, help_text='The default title of the image to be used in rendering.  This is a tool-tip that appears when the user holds the mouse pointer over the image', max_length=80, verbose_name='title')),
            ],
        ),
        migrations.CreateModel(
            name='Tag',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='The name of the tag.', max_length=100, verbose_name='name')),
                ('slug', models.SlugField(help_text='The slug for use in URLs', max_length=100, unique=True, verbose_name='slug')),
            ],
            options={
                'ordering': ('name',),
            },
        ),
        migrations.CreateModel(
            name='Article',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(help_text='The title of the article.', max_length=200, verbose_name='title')),
                ('show_title', models.BooleanField(default=True, help_text='If the title should be shown (if not blank)', verbose_name='show title')),
                ('slug', models.SlugField(help_text='The name or slug for use in URLs and within the application.  Note: Auto-generated value may not be unique. Uniquness and format are checked after submit', max_length=100, unique=True, verbose_name='name/slug')),
                ('iframe_src', models.CharField(blank=True, help_text='If an iframe is to be displayed, the URL of an approved iframe source (must be listed in settings), optionally followed by a css height value', max_length=255, verbose_name='iframe source')),
                ('iframe_height', models.CharField(blank=True, help_text='The height of the iframe using css height syntax.  Blank to use values set in stylesheets', max_length=20, verbose_name='iframe height')),
                ('content', models.TextField(blank=True, help_text='The content of the article', verbose_name='content')),
                ('content_classes', models.CharField(blank=True, help_text='Extra classes to be applied to the content when displayed', max_length=50, verbose_name='content classes')),
                ('summary', models.TextField(blank=True, help_text='A summary of the content of the article', verbose_name='summary')),
                ('if_summary_blank', models.IntegerField(choices=[(0, 'Show Blank'), (1, 'Show Content')], default=1, help_text='What to display if the summary is blank', verbose_name='If summary is blank')),
                ('read_more', models.CharField(blank=True, default='Read More', help_text='Text to display in a read more link', max_length=50)),
                ('created_datetime', models.DateTimeField(auto_now_add=True, help_text='The date/time that this article was created', verbose_name='date/time created')),
                ('updated_datetime', models.DateTimeField(auto_now=True, help_text='The date/time that this article was updated', verbose_name='date/time updated')),
                ('publish_date', models.DateField(default=datetime.date.today, help_text='The published date, which can be filled in by the editors.  Used for sorting when more than one article is in a rack.', verbose_name='published')),
                ('display', models.CharField(choices=[('Y', 'Normal'), ('P', 'Preview Only'), ('N', 'Do not display')], default='Y', help_text='How the section should be displayed.  If hidden from racks, the article may still be found by other means', max_length=2, verbose_name='display')),
                ('author', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='pyusite_article', to=settings.AUTH_USER_MODEL)),
                ('iframe_document', models.ForeignKey(blank=True, help_text='If selected, the document to be displayed in the iframe.  This will take precedence over anything entered in the iframe source field', null=True, on_delete=django.db.models.deletion.SET_NULL, to='pyusite.document')),
                ('featured_image', models.ForeignKey(blank=True, help_text='The image to be displayed when linking to the article on social media', null=True, on_delete=django.db.models.deletion.SET_NULL, to='pyusite.sdcimage')),
            ],
            options={
                'ordering': ('-publish_date', 'title'),
            },
        ),
        migrations.CreateModel(
            name='Articlecomment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Your name', max_length=80)),
                ('email', models.EmailField(help_text='Your email', max_length=254)),
                ('content', models.TextField()),
                ('when', models.DateTimeField(auto_now_add=True)),
                ('active', models.BooleanField(default=False)),
                ('article', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='comments', to='pyusite.article')),
            ],
            options={
                'ordering': ['when'],
            },
        ),
        migrations.CreateModel(
            name='Menuitem',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('href', models.CharField(blank=True, help_text='The URL that this menu item points to', max_length=255, verbose_name='href')),
                ('label', models.CharField(blank=True, help_text='The label of this menu item', max_length=30, verbose_name='label')),
                ('order', models.IntegerField(help_text='The order that the item would appear in a menu', verbose_name='order')),
                ('menu', models.ForeignKey(blank=True, help_text='The menu to which this item belongs', null=True, on_delete=django.db.models.deletion.SET_NULL, to='pyusite.menu')),
            ],
        ),
        migrations.CreateModel(
            name='MenuPage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('menu', models.ForeignKey(help_text='The menu that is attached to this page', on_delete=django.db.models.deletion.CASCADE, to='pyusite.menu')),
                ('page', models.ForeignKey(help_text='The page that this menu is attached to ', on_delete=django.db.models.deletion.CASCADE, to='pyusite.page')),
            ],
        ),
        migrations.CreateModel(
            name='Hanger',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('order', models.IntegerField(default=0, help_text='A number used to order the articles, overriding the default', verbose_name='order')),
                ('expiration_date', models.DateField(blank=True, help_text='The date after which the article should no longer be displayed in the rack', null=True, verbose_name='expiration date')),
                ('article', models.ForeignKey(blank=True, help_text='The article held by the containing article', null=True, on_delete=django.db.models.deletion.SET_NULL, to='pyusite.article')),
                ('rack', models.ForeignKey(blank=True, help_text='The rack that holds the article', null=True, on_delete=django.db.models.deletion.SET_NULL, to='pyusite.rack')),
            ],
            options={
                'ordering': ('rack', 'order', 'article'),
            },
        ),
        migrations.CreateModel(
            name='Section',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(blank=True, help_text='The title of the page. to be displayed (can be blank)', max_length=200, verbose_name='title')),
                ('show_title', models.BooleanField(default=True, help_text='If the title of this section should be shown (if not blank)', verbose_name='show title')),
                ('slug', models.SlugField(help_text='The name or slug for use in URLs and within the application.  Note: Auto-generated value may not be unique. Uniquness and format are checked after submit', max_length=100, unique=True, verbose_name='name/slug')),
                ('order', models.IntegerField(default=0, help_text='The order that the section should appear on the page', verbose_name='order')),
                ('content_before_racks', models.TextField(blank=True, help_text='content to be displayed before the racks')),
                ('content_after_racks', models.TextField(blank=True, help_text='content to be displayed after the racks')),
                ('display', models.CharField(choices=[('Y', 'Normal'), ('P', 'Preview Only'), ('N', 'Do not display')], default='Y', help_text='How the section should be displayed', max_length=2, verbose_name='display when')),
                ('collapse', models.BooleanField(default=True, help_text='Collapse if there are no racks', verbose_name='collapse')),
                ('page', models.ForeignKey(blank=True, help_text='The page to which this section belongs', null=True, on_delete=django.db.models.deletion.SET_NULL, to='pyusite.page')),
            ],
            options={
                'ordering': ('page', 'order'),
            },
        ),
        migrations.AddField(
            model_name='rack',
            name='section',
            field=models.ForeignKey(blank=True, help_text='The section to which the rack belongs', null=True, on_delete=django.db.models.deletion.SET_NULL, to='pyusite.section'),
        ),
    ]
